name: Windows Build (single-run or sequential backends)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      backend:
        description: "Optional single backend to run (WIN32_OPENGL or WIN32_DX11). Leave empty to run both sequentially."
        required: false
        default: ""
      mode:
        description: "Build mode (package or build). If empty, runs 'package' by default."
        required: false
        default: "package"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 120

    env:
      DEFAULT_MODE: ${{ github.event.inputs.mode || 'package' }}
      REQUESTED_BACKEND: ${{ github.event.inputs.backend || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Detect code directory
        id: detect_code
        shell: pwsh
        run: |
          $ws = $env:GITHUB_WORKSPACE
          $candidates = @("$ws\code", "$ws\4cc\code")
          $found = $null
          foreach ($p in $candidates) {
            if (Test-Path $p -PathType Container) { $found = $p; break }
          }
          if (-not $found) {
            # try quick recursive search one level deep
            $found = Get-ChildItem -Path $ws -Directory -Recurse -Depth 3 -ErrorAction SilentlyContinue |
                     Where-Object { $_.Name -ieq 'code' } | Select-Object -First 1
            if ($found) { $found = $found.FullName } else { $found = $null }
          }
          if (-not $found) { throw "Could not find a 'code' directory (tried ./code and ./4cc/code and a shallow search). Please check repo layout." }
          $rel = (Resolve-Path -Path $found).Path.Replace($ws + "\", "")
          Write-Host "Detected code directory: $found (relative: $rel)"
          # expose both absolute and relative
          echo "code_abs=$found" >> $env:GITHUB_OUTPUT
          echo "code_rel=$rel" >> $env:GITHUB_OUTPUT

      - name: Prepare artifact folder
        shell: pwsh
        run: |
          $out = Join-Path $env:GITHUB_WORKSPACE 'ci-artifacts'
          if (Test-Path $out) { Remove-Item -Recurse -Force $out }
          New-Item -ItemType Directory -Path $out | Out-Null
          echo "ARTIFACT_ROOT=$out"
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Build (single or both backends sequentially) â€” capture logs & outputs
        shell: pwsh
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
          MODE_INPUT: ${{ env.DEFAULT_MODE }}
          REQUESTED_BACKEND: ${{ env.REQUESTED_BACKEND }}
        run: |
          $codeAbs = "${{ steps.detect_code.outputs.code_abs }}"
          if (-not (Test-Path $codeAbs)) { throw "Code directory not found at $codeAbs" }
          Push-Location $codeAbs

          $m = if ($env:MODE_INPUT -and $env:MODE_INPUT.Trim() -ne '') { $env:MODE_INPUT.Trim() } else { 'package' }
          $requested = if ($env:REQUESTED_BACKEND -and $env:REQUESTED_BACKEND.Trim() -ne '') { $env:REQUESTED_BACKEND.Trim() } else { '' }

          $allBackends = @('WIN32_OPENGL','WIN32_DX11')
          if ($requested) {
            if ($allBackends -notcontains $requested) { throw "Requested backend '$requested' is not a supported value. Supported: $($allBackends -join ', ')" }
            $backendsToRun = @($requested)
          } else {
            $backendsToRun = $allBackends
          }

          $artifactRoot = Join-Path $env:GITHUB_WORKSPACE 'ci-artifacts'
          foreach ($backend in $backendsToRun) {
            $label = "$backend-$m"
            Write-Host "=== Building $label in $codeAbs ==="

            # prepare log path
            $logPath = Join-Path $artifactRoot ("buildlog-$label.txt")
            if (Test-Path $logPath) { Remove-Item $logPath -Force }

            # attempt setup script
            if (Test-Path "custom\bin\setup_cl_x64.bat") {
              Write-Host "Calling custom\bin\setup_cl_x64.bat..."
              cmd.exe /c "call custom\bin\setup_cl_x64.bat > \"$logPath\" 2>&1"
              Write-Host "Setup output written to $logPath"
            } else {
              Add-Content -Path $logPath -Value "WARNING: custom\bin\setup_cl_x64.bat not found. Continuing without explicit MSVC setup."
              Write-Host "WARNING: setup_cl_x64.bat not found; continuing."
            }

            # choose script
            if ($m -ieq 'package') {
              if (-not (Test-Path "bin\package.bat")) {
                Add-Content -Path $logPath -Value "ERROR: bin\package.bat not found in $codeAbs\bin"
                Write-Host "ERROR: package.bat missing; see $logPath"
                continue
              }
              Write-Host "Running: bin\\package.bat /D$backend"
              cmd.exe /c "call bin\package.bat /D$backend >> \"$logPath\" 2>&1" 
            } else {
              if (-not (Test-Path "bin\build.bat")) {
                Add-Content -Path $logPath -Value "ERROR: bin\build.bat not found in $codeAbs\bin"
                Write-Host "ERROR: build.bat missing; see $logPath"
                continue
              }
              Write-Host "Running: bin\\build.bat /D$backend"
              cmd.exe /c "call bin\build.bat /D$backend >> \"$logPath\" 2>&1"
            }

            # copy any produced outputs into artifact root under label subfolder
            $labelDir = Join-Path $artifactRoot $label
            New-Item -ItemType Directory -Path $labelDir -Force | Out-Null

            # candidate output locations
            $candidates = @("build","distributions","out","dist")
            foreach ($c in $candidates) {
              if (Test-Path $c) {
                Copy-Item -Path $c -Destination $labelDir -Recurse -Force -ErrorAction SilentlyContinue
              }
            }
            # always copy the build log
            Copy-Item -Path $logPath -Destination $labelDir -Force -ErrorAction SilentlyContinue

            Write-Host "Finished step for $label; artifacts (if any) copied to $labelDir"
          }

          Pop-Location

      - name: Show artifact folder contents (debug)
        shell: pwsh
        run: |
          $root = Join-Path $env:GITHUB_WORKSPACE 'ci-artifacts'
          if (-not (Test-Path $root)) { Write-Host "No ci-artifacts folder found." ; exit 0 }
          Write-Host "Contents of ci-artifacts:"
          Get-ChildItem -Path $root -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Create single zip of artifacts (if any)
        shell: pwsh
        run: |
          $root = Join-Path $env:GITHUB_WORKSPACE 'ci-artifacts'
          $zip = Join-Path $env:RUNNER_TEMP 'ci-artifacts.zip'
          if (Test-Path $zip) { Remove-Item $zip -Force }
          if (Test-Path $root) {
            Compress-Archive -Path (Join-Path $root '*') -DestinationPath $zip -Force
            Write-Host "Created $zip"
            echo "artifact_zip=$zip" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "No artifacts to zip."
            echo "artifact_zip=" >> $env:GITHUB_OUTPUT
          }

      - name: Upload artifacts (zip)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: ${{ steps.detect_code.outputs.code_abs }}/../ci-artifacts/**  # safe: upload found artifact subfolders
